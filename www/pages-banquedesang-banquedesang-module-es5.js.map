{"version":3,"sources":["./src/app/pages/banquedesang/banquedesang.page.html","./src/app/pages/banquedesang/banquedesang.module.ts","./src/app/pages/banquedesang/banquedesang.page.scss","./src/app/pages/banquedesang/banquedesang.page.ts","./src/app/services/banquedesang.service.ts"],"names":[],"mappings":"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","file":"pages-banquedesang-banquedesang-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar [color]=\\\"networkStatus && networkStatus.connected ?'primary':'danger'\\\">\\n        <ion-back-button slot=\\\"start\\\"></ion-back-button>\\n        <ion-buttons slot=\\\"end\\\" >\\n          <ion-menu-button ><ion-icon name=\\\"more\\\"></ion-icon></ion-menu-button>\\n        </ion-buttons>\\n        <ion-title >{{title}}</ion-title>\\n      </ion-toolbar>\\n      <ion-toolbar color=\\\"primary\\\" *ngIf=\\\"networkStatus && networkStatus.connected == true\\\">\\n            <ion-button color=\\\"danger\\\" shape=\\\"round\\\" slot=\\\"start\\\" (click)=\\\"creerHopital()\\\" *ngIf=\\\"buttonPlus==0\\\">\\n              <ion-icon name=\\\"add\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button color=\\\"danger\\\" shape=\\\"round\\\" slot=\\\"start\\\" (click)=\\\"retour()\\\" *ngIf=\\\"buttonPlus==1\\\">\\n                 <ion-icon name=\\\"arrow-round-back\\\"></ion-icon>\\n            </ion-button>\\n        </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n<div  *ngIf=\\\"networkStatus && networkStatus.connected == true\\\">\\n  <div *ngIf=\\\"listHopitaux==0\\\">\\n    <ion-segment [(ngModel)]='selectedView'>\\n      <ion-segment-button value='proche' (click)=\\\" afficherHopP()\\\">\\n        <ion-label>Proche de moi</ion-label>\\n      </ion-segment-button>\\n      <ion-segment-button value='Autres'>\\n          <ion-label>Autres</ion-label>\\n      </ion-segment-button>\\n    </ion-segment>\\n    <div [ngSwitch]=\\\"selectedView\\\" >\\n        <div *ngSwitchCase=\\\"'proche'\\\">\\n            <ion-card *ngFor=\\\"let banque of banqueSangsP\\\">\\n                <ion-card-header>\\n                    <ion-card-title>\\n                      {{banque.nom}}\\n                    </ion-card-title>\\n               </ion-card-header>\\n\\n               <ion-card-content>\\n                 <ion-item>\\n                    {{banque.adresse}}\\n                 </ion-item>\\n                 <ion-item>\\n                    Appeler\\n                      <div  slot=\\\"end\\\">\\n                          <ion-button color=\\\"success\\\" (click)=\\\"appelleR(banque.telephone)\\\">\\n                              <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                          </ion-button>\\n                      </div>\\n                  </ion-item>\\n               </ion-card-content>\\n             </ion-card>\\n          <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"loadData($event)\\\">\\n            <ion-infinite-scroll-content\\n                    loadingSpinner=\\\"bubbles\\\"\\n                    loadingText=\\\"Chargement...\\\">\\n            </ion-infinite-scroll-content>\\n          </ion-infinite-scroll>\\n        </div>\\n        <div *ngSwitchCase=\\\"'Autres'\\\">\\n            <ion-toolbar color=\\\"secondary\\\">\\n                <ion-grid>\\n                    <ion-row>\\n                      <ion-col size=\\\"9\\\" size-sm>\\n                          <ion-searchbar animated=\\\"true\\\" [(ngModel)]=\\\"kw\\\"  showCancelButton placeholder=\\\"Ville\\\"></ion-searchbar>\\n                      </ion-col>\\n                      <ion-col size=\\\"3\\\" size-sm>\\n                          <ion-button shape=\\\"round\\\"  (click)=\\\"afficherHop(kw)\\\"><ion-icon name=\\\"search\\\"></ion-icon></ion-button>\\n                      </ion-col>\\n                    </ion-row>\\n                  </ion-grid>\\n                </ion-toolbar>\\n          <ion-card *ngFor=\\\"let banque of banqueSangs\\\" >\\n            <ion-card-header>\\n                <ion-card-title>\\n                  {{banque.nom}}\\n                </ion-card-title>\\n           </ion-card-header>\\n\\n           <ion-card-content>\\n             <ion-item>\\n                {{banque.adresse}}\\n             </ion-item>\\n             <ion-item>\\n                Appeler\\n                  <div  slot=\\\"end\\\">\\n                      <ion-button color=\\\"success\\\" (click)=\\\"appelleR(banque.telephone)\\\">\\n                          <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                      </ion-button>\\n                  </div>\\n              </ion-item>\\n           </ion-card-content>\\n         </ion-card>\\n         <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"loadData($event)\\\">\\n            <ion-infinite-scroll-content\\n                    loadingSpinner=\\\"bubbles\\\"\\n                    loadingText=\\\"Chargement...\\\">\\n            </ion-infinite-scroll-content>\\n          </ion-infinite-scroll>\\n        </div>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"listHopitaux==1\\\">\\n       <ion-item>\\n          <ion-label position=\\\"floating\\\" >Nom:</ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"bs.nom\\\" ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\" >Téléphone:</ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"bs.telephone\\\" ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\" >Adresse :</ion-label>\\n          <ion-textarea [(ngModel)]=\\\"bs.adresse\\\" ></ion-textarea>\\n        </ion-item>\\n    <ion-button expand=\\\"block\\\" fill=\\\"outline\\\"(click)=\\\"enregistrer(bs)\\\">Enregistrer</ion-button>\\n  </div>\\n</div>\\n<div *ngIf=\\\"networkStatus && networkStatus.connected == false\\\" >\\n  <ion-card *ngFor=\\\"let banque of banqueSangsP\\\">\\n      <ion-card-header>\\n          <ion-card-title>\\n            {{banque.nom}}\\n          </ion-card-title>\\n     </ion-card-header>\\n\\n     <ion-card-content>\\n       <ion-item>\\n          {{banque.adresse}}\\n       </ion-item>\\n       <ion-item>\\n          Appeler\\n            <div  slot=\\\"end\\\">\\n                <ion-button color=\\\"success\\\" (click)=\\\"appelleR(banque.telephone)\\\">\\n                    <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                </ion-button>\\n            </div>\\n        </ion-item>\\n     </ion-card-content>\\n   </ion-card>\\n</div>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { BanquedesangPage } from './banquedesang.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BanquedesangPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [BanquedesangPage]\n})\nexport class BanquedesangPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2JhbnF1ZWRlc2FuZy9iYW5xdWVkZXNhbmcucGFnZS5zY3NzIn0= */\"","import { BanquedesangService } from './../../services/banquedesang.service';\nimport { BanquedeSangModel } from './../../models/banquedesang.model';\nimport { CallNumber } from '@ionic-native/call-number/ngx';\nimport { ToastController } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { Component, OnInit } from '@angular/core';\nimport {NavigationExtras, Router} from \"@angular/router\";\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport {Plugins,NetworkStatus,PluginListenerHandle} from \"@capacitor/core\";\nconst {Network} = Plugins;\n\n@Component({\n  selector: 'app-banquedesang',\n  templateUrl: './banquedesang.page.html',\n  styleUrls: ['./banquedesang.page.scss'],\n})\nexport class BanquedesangPage implements OnInit {\n\n  public nom:string;\n  public listHopitaux: number = 0;\n  public buttonPlus: number = 0;\n  public title: string = 'Banque de sang';\n  public bs: BanquedeSangModel;\n  public kw:string=\"\";\n  public banqueSangs;\n  public banqueSangsP;\n  public localite:string=\"\";\n  networkListener: PluginListenerHandle;\n  networkStatus:NetworkStatus;\n  constructor(private router:Router,private bsservice:BanquedesangService,public geolocation:Geolocation,\n  private toastctrl:ToastController,private geocoder:NativeGeocoder,private callNumber: CallNumber) {\n    this.bs = {} as BanquedeSangModel;\n   }\n\nasync  ngOnInit() {\n\n  this.networkListener= Network.addListener('networkStatusChange',status =>{\n    console.log(\"network status change\",status);\n    this.networkStatus = status;\n   });\n\n   this.networkStatus = await Network.getStatus();\n   if(this.networkStatus.connected == false){\n    this.banqueSangsP=[\n      {nom:'Banque de sang Hopital saint Joseph ',telephone:'+243854878767',ville:'Kinshasa',adresse:'14 ème rue Limete residentiel',localite:'Limete'}\n    ]\n   }else if(this.networkStatus.connected == true){\n      this.afficherHopP();\n   }\n  }\n  afficherHopP(){\n    this.geolocation.getCurrentPosition().then((position) => {\n      let latitude= position.coords.latitude;\n      let longitude= position.coords.longitude;\n      var options:NativeGeocoderOptions={\n        useLocale:true,\n        maxResults:1\n      };\n      this.geocoder.reverseGeocode(latitude,longitude,options).\n     then((results)=>{\n        var localite = results[0].subLocality;\n        this.bsservice.getbsP(localite)\n      .subscribe(data=>{\n        this.banqueSangsP = data;\n      },err=>{\n        console.log(err)\n      })\n     });\n     }).catch((error) => {\n       console.log('Erreur pour la localisation probleme internet', error);\n     });\n  }\n  afficherHop(kw){\n    this.bsservice.getbs(kw)\n      .subscribe(data=>{\n        this.banqueSangs = data;\n      },err=>{\n        console.log(err)\n      })\n  }\n  creerHopital() {\n    this.listHopitaux=1;\n    this.buttonPlus=1;\n    this.title='Création BS';\n  }\n  retour(){\n    this.listHopitaux=0;\n    this.buttonPlus=0;\n    this.title='Banque de sang';\n  }\n  loadData(event) {\n    setTimeout(() => {\n        console.log('Done');\n        event.target.complete();\n\n        // App logic to determine if all data is loaded\n        // and disable the infinite scroll\n        if (this.banqueSangs.length == 1000) {\n            event.target.disabled = true;\n        }\n    }, 500);\n}\nasync enregistrer(bs:BanquedeSangModel) {\n  console.log(bs);\n    this.geolocation.getCurrentPosition().then((position) => {\n      bs.latitude= position.coords.latitude;\n      bs.longitude= position.coords.longitude;\n      var options:NativeGeocoderOptions={\n        useLocale:true,\n        maxResults:1\n      }\n       this.geocoder.reverseGeocode(bs.latitude,bs.longitude,options).\n       then((results)=>{\n          bs.localite = results[0].subLocality;\n          bs.ville = results[0].administrativeArea;\n          this.bsservice.enregistrerMed(bs)\n      .subscribe(res=>{\n        this.bs=res;\n        console.log(bs);\n        this.retour();\n      this.retour();\n      });\n       });\n     }).catch((error) => {\n       console.log('Erreur pour la localisation probleme internet', error);\n     });\n}\nappelleR(telephone: string) {\n  console.log(telephone);\n  this.callNumber.callNumber(telephone, true)\n      .then(res => console.log('Launched dialer!', res))\n      .catch(err => console.log('Error launching dialer', err));\n}\n}\n","import { Observable } from 'rxjs';\nimport { BanquedeSangModel } from './../models/banquedesang.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BanquedesangService {\n  public host:string=\"http://41.242.128.107:780\";\n  constructor(private httpclient:HttpClient) {\n    \n   }\n   getbs(kw:string):Observable<BanquedeSangModel>{\n      return this.httpclient.get<BanquedeSangModel>(this.host+\"/banque?kw=\"+kw);\n   }\n   getbsP(kw:string):Observable<BanquedeSangModel>{\n    return this.httpclient.get<BanquedeSangModel>(this.host+\"/banquep?kw=\"+kw);\n }\nenregistrerMed(bs:BanquedeSangModel):Observable<BanquedeSangModel>{\n    return this.httpclient.post<BanquedeSangModel>(this.host+\"/banque\",bs);\n  }\n}\n"],"sourceRoot":""}