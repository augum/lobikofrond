{"version":3,"sources":["./src/app/pages/ambulance/ambulance.page.html","./src/app/pages/ambulance/ambulance.module.ts","./src/app/pages/ambulance/ambulance.page.scss","./src/app/pages/ambulance/ambulance.page.ts","./src/app/services/ambulance.service.ts"],"names":[],"mappings":"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","file":"pages-ambulance-ambulance-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar [color]=\\\"networkStatus && networkStatus.connected ?'primary':'danger'\\\">\\n        <ion-back-button slot=\\\"start\\\"></ion-back-button>\\n        <ion-buttons slot=\\\"end\\\" >\\n          <ion-menu-button ><ion-icon name=\\\"more\\\"></ion-icon></ion-menu-button>\\n        </ion-buttons>\\n      <ion-title > {{title}} </ion-title>\\n      </ion-toolbar>\\n      <ion-toolbar color=\\\"primary\\\" *ngIf=\\\"networkStatus && networkStatus.connected == true\\\">\\n            <ion-button color=\\\"danger\\\" shape=\\\"round\\\" slot=\\\"start\\\" (click)=\\\"creerHopital()\\\" *ngIf=\\\"buttonPlus==0\\\">\\n              <ion-icon name=\\\"add\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button color=\\\"danger\\\" shape=\\\"round\\\" slot=\\\"start\\\" (click)=\\\"retour()\\\" *ngIf=\\\"buttonPlus==1\\\">\\n                 <ion-icon name=\\\"arrow-round-back\\\"></ion-icon>\\n            </ion-button>\\n        </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n<div  *ngIf=\\\"networkStatus && networkStatus.connected == true\\\">\\n  <div *ngIf=\\\"listHopitaux==0\\\">\\n    <ion-segment [(ngModel)]='selectedView'>\\n      <ion-segment-button value='proche' (click)=\\\" afficherHopP()\\\">\\n        <ion-label>Proche de moi</ion-label>\\n      </ion-segment-button>\\n      <ion-segment-button value='Autres'>\\n          <ion-label>Autres</ion-label>\\n      </ion-segment-button>\\n    </ion-segment>\\n    <div [ngSwitch]=\\\"selectedView\\\" >\\n        <div *ngSwitchCase=\\\"'proche'\\\">\\n            <ion-card *ngFor=\\\"let ambulance of ambulancesP\\\">\\n                <ion-card-header>\\n                    <ion-card-title>\\n                      {{ambulance.nom}}\\n                    </ion-card-title>\\n               </ion-card-header>\\n\\n               <ion-card-content>\\n                 <ion-item>\\n                    {{ambulance.adresse}}\\n                 </ion-item>\\n                 <ion-item>\\n                    Appeler\\n                      <div  slot=\\\"end\\\">\\n                          <ion-button color=\\\"success\\\" (click)=\\\"appelleR(ambulance.telephone)\\\">\\n                              <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                          </ion-button>\\n                      </div>\\n                  </ion-item>\\n               </ion-card-content>\\n             </ion-card>\\n          <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"loadData($event)\\\">\\n            <ion-infinite-scroll-content\\n                    loadingSpinner=\\\"bubbles\\\"\\n                    loadingText=\\\"Chargement...\\\">\\n            </ion-infinite-scroll-content>\\n          </ion-infinite-scroll>\\n        </div>\\n        <div *ngSwitchCase=\\\"'Autres'\\\">\\n            <ion-toolbar color=\\\"secondary\\\">\\n                <ion-grid>\\n                    <ion-row>\\n                      <ion-col size=\\\"9\\\" size-sm>\\n                          <ion-searchbar animated=\\\"true\\\" [(ngModel)]=\\\"kw\\\"  showCancelButton placeholder=\\\"Ville\\\"></ion-searchbar>\\n                      </ion-col>\\n                      <ion-col size=\\\"3\\\" size-sm>\\n                          <ion-button shape=\\\"round\\\"  (click)=\\\"afficherHop(kw)\\\"><ion-icon name=\\\"search\\\"></ion-icon></ion-button>\\n                      </ion-col>\\n                    </ion-row>\\n                  </ion-grid>\\n                </ion-toolbar>\\n          <ion-card *ngFor=\\\"let ambulance of ambulances\\\" >\\n            <ion-card-header>\\n                <ion-card-title>\\n                  {{ambulance.nom}}\\n                </ion-card-title>\\n           </ion-card-header>\\n\\n           <ion-card-content>\\n             <ion-item>\\n                {{ambulance.adresse}}\\n             </ion-item>\\n             <ion-item>\\n                Appeler\\n                  <div  slot=\\\"end\\\">\\n                      <ion-button color=\\\"success\\\" (click)=\\\"appelleR(ambulance.telephone)\\\">\\n                          <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                      </ion-button>\\n                  </div>\\n              </ion-item>\\n           </ion-card-content>\\n         </ion-card>\\n         <ion-infinite-scroll threshold=\\\"100px\\\" (ionInfinite)=\\\"loadData($event)\\\">\\n            <ion-infinite-scroll-content\\n                    loadingSpinner=\\\"bubbles\\\"\\n                    loadingText=\\\"Chargement...\\\">\\n            </ion-infinite-scroll-content>\\n          </ion-infinite-scroll>\\n        </div>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"listHopitaux==1\\\">\\n       <ion-item>\\n          <ion-label position=\\\"floating\\\" >Nom:</ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"ambulance.nom\\\" ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\" >Téléphone:</ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"ambulance.telephone\\\" ></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\" >Adresse :</ion-label>\\n          <ion-textarea [(ngModel)]=\\\"ambulance.adresse\\\" ></ion-textarea>\\n        </ion-item>\\n    <ion-button expand=\\\"block\\\" fill=\\\"outline\\\"(click)=\\\"enregistrer(ambulance)\\\">Enregistrer</ion-button>\\n  </div>\\n  </div>\\n  <div *ngIf=\\\"networkStatus && networkStatus.connected == false\\\" >\\n    <ion-card *ngFor=\\\"let ambulance of ambulancesP\\\">\\n        <ion-card-header>\\n            <ion-card-title>\\n              {{ambulance.nom}}\\n            </ion-card-title>\\n       </ion-card-header>\\n\\n       <ion-card-content>\\n         <ion-item>\\n            {{ambulance.adresse}}\\n         </ion-item>\\n         <ion-item>\\n            Appeler\\n              <div  slot=\\\"end\\\">\\n                  <ion-button color=\\\"success\\\" (click)=\\\"appelleR(ambulance.telephone)\\\">\\n                      <ion-icon slot=\\\"end\\\" name=\\\"call\\\"></ion-icon>\\n                  </ion-button>\\n              </div>\\n          </ion-item>\\n       </ion-card-content>\\n     </ion-card>\\n  </div>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AmbulancePage } from './ambulance.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AmbulancePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AmbulancePage]\n})\nexport class AmbulancePageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FtYnVsYW5jZS9hbWJ1bGFuY2UucGFnZS5zY3NzIn0= */\"","import { CallNumber } from '@ionic-native/call-number/ngx';\nimport { AmbulanceService } from './../../services/ambulance.service';\nimport { AmbulanceModel } from './../../models/ambulance.model';\nimport { ToastController } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { Component, OnInit } from '@angular/core';\nimport {NavigationExtras, Router} from \"@angular/router\";\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport {Plugins,NetworkStatus,PluginListenerHandle} from \"@capacitor/core\";\nconst {Network} = Plugins;\n\n\n@Component({\n  selector: 'app-ambulance',\n  templateUrl: './ambulance.page.html',\n  styleUrls: ['./ambulance.page.scss'],\n})\nexport class AmbulancePage implements OnInit {\n\n  public nom:string;\n  public listHopitaux: number = 0;\n  public buttonPlus: number = 0;\n  public title: string = 'Ambulance';\n  public ambulance: AmbulanceModel;\n  public kw:string=\"\";\n  public ambulances;\n  public ambulancesP;\n  public localite:string=\"\";\n  networkListener: PluginListenerHandle;\n  networkStatus:NetworkStatus;\n  constructor(private router:Router,private ambulanceservice:AmbulanceService,public geolocation:Geolocation,\n  private toastctrl:ToastController,private geocoder:NativeGeocoder,private callNumber: CallNumber) {\n    this.ambulance = {} as AmbulanceModel;\n   }\n\nasync  ngOnInit() {\n\n  this.networkListener= Network.addListener('networkStatusChange',status =>{\n    console.log(\"network status change\",status);\n    this.networkStatus = status;\n   });\n\n   this.networkStatus = await Network.getStatus();\n   if(this.networkStatus.connected == false){\n    this.ambulancesP=[\n      {nom:'Ambulance Hopital Saint Joseph',telephone:'+243854878767',ville:'Kinshasa',adresse:'14 ème rue Limete residentiel',localite:'Limete'}\n\n    ]\n   }else if(this.networkStatus.connected == true){\n    this.afficherHopP();\n   }\n  }\n  afficherHopP(){\n    this.geolocation.getCurrentPosition().then((position) => {\n      let latitude= position.coords.latitude;\n      let longitude= position.coords.longitude;\n      var options:NativeGeocoderOptions={\n        useLocale:true,\n        maxResults:1\n      };\n      this.geocoder.reverseGeocode(latitude,longitude,options).\n     then((results)=>{\n        var localite = results[0].subLocality;\n        this.ambulanceservice.getAmbulanceP(localite)\n      .subscribe(data=>{\n        this.ambulancesP = data;\n      },err=>{\n        console.log(err)\n      })\n     });\n     }).catch((error) => {\n       console.log('Erreur pour la localisation probleme internet', error);\n     });\n  }\n  afficherHop(kw){\n    this.ambulanceservice.getAmbulance(kw)\n      .subscribe(data=>{\n        this.ambulances = data;\n      },err=>{\n        console.log(err)\n      })\n  }\n  creerHopital() {\n    this.listHopitaux=1;\n    this.buttonPlus=1;\n    this.title='Création ambulance';\n  }\n  retour(){\n    this.listHopitaux=0;\n    this.buttonPlus=0;\n    this.title='Ambulances';\n  }\n  loadData(event) {\n    setTimeout(() => {\n        console.log('Done');\n        event.target.complete();\n\n        // App logic to determine if all data is loaded\n        // and disable the infinite scroll\n        if (this.ambulances.length == 1000) {\n            event.target.disabled = true;\n        }\n    }, 500);\n}\nasync enregistrer(ambulance:AmbulanceModel) {\n  console.log(ambulance);\n    this.geolocation.getCurrentPosition().then((position) => {\n      ambulance.latitude= position.coords.latitude;\n      ambulance.longitude= position.coords.longitude;\n      var options:NativeGeocoderOptions={\n        useLocale:true,\n        maxResults:1\n      }\n       this.geocoder.reverseGeocode(ambulance.latitude,ambulance.longitude,options).\n       then((results)=>{\n          ambulance.localite = results[0].subLocality;\n          ambulance.ville = results[0].administrativeArea;\n          this.ambulanceservice.enregistrerMed(ambulance)\n      .subscribe(res=>{\n        this.ambulance=res;\n        console.log(ambulance);\n        this.retour();\n      this.retour();\n      });\n       });\n     }).catch((error) => {\n       console.log('Erreur pour la localisation probleme internet', error);\n     });\n}\nappelleR(telephone: string) {\n  console.log(telephone);\n  this.callNumber.callNumber(telephone, true)\n      .then(res => console.log('Launched dialer!', res))\n      .catch(err => console.log('Error launching dialer', err));\n}\n}\n","import { Observable } from 'rxjs';\nimport { AmbulanceModel } from './../models/ambulance.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AmbulanceService {\n  public host:string=\"http://41.242.128.107:780\";\n  constructor(private httpclient:HttpClient) {\n    \n   }\n   getAmbulance(kw:string):Observable<AmbulanceModel>{\n      return this.httpclient.get<AmbulanceModel>(this.host+\"/ambulance?kw=\"+kw);\n   }\n   getAmbulanceP(kw:string):Observable<AmbulanceModel>{\n    return this.httpclient.get<AmbulanceModel>(this.host+\"/ambulancep?kw=\"+kw);\n }\n enregistrerMed(ambulance:AmbulanceModel):Observable<AmbulanceModel>{\n    return this.httpclient.post<AmbulanceModel>(this.host+\"/ambulance\",ambulance);\n  }\n}\n"],"sourceRoot":""}